#!/bin/bash

hash docker || exit 1

GO_VERSION="1.13.4"
ALPINE_VERSION="3.10"

TEMP="$(mktemp -d)"

trap "{ rm -rf ${TEMP}; }" EXIT

cat > "${TEMP}/Caddyfile" <<-EOF
	0.0.0.0:80 {
	    root /var/www/public
	    gzip
	    tls off
	    templates
	}
EOF

cat > "${TEMP}/index.html" <<-EOF
	<html>
	    <head>
	        <title>Caddy HTTP/2 Server</title>
	        <style>
	            body { font-family: monospace; }
	            h1 { font-size: 32px; }
	            p { font-size: 16px; }
	        </style>
	    </head>
	    <body>
	        <h1>Caddy HTTP/2 Server</h1>
	        <p>{{.NowDate.Format "2006-01-02 15:04:05 MST"}}</p>
	        <p>{{.IP}}</p>
	    </body>
	</html>
EOF

cat > "${TEMP}/caddy.go" <<-EOF
	package main

	import (
	  "github.com/caddyserver/caddy/caddy/caddymain"
	)

	func main() {
	  caddymain.EnableTelemetry = false
	  caddymain.Run()
	}
EOF

cat > "${TEMP}/build" <<-EOF
	#!/bin/sh

	cd /mnt || exit 1

	go mod init caddy
	go get github.com/caddyserver/caddy
	go build

	/mnt/caddy -version | head -1 | awk "{ print \\\$2}" | tr -d "\t\n\r v" > /mnt/version

	cd - > /dev/null || exit 1
EOF

chmod +x "${TEMP}/build"

docker run --volume "${TEMP}":/mnt golang:"${GO_VERSION}-alpine${ALPINE_VERSION}" /mnt/build

cat > "$TEMP/caddyfile.tmpl" <<-EOF
	{{ getenv "LISTENADDR" "0.0.0.0"}}:{{ getenv "PORT" "443" }} {
	    root /var/www/public
	    gzip
	    {{ getenv "PROXY" ""}}
            proxy / {{ getenv "BACKENDS" }}  {
		    {{ getenv "INSECURESKIPVERIFY" "insecure_skip_verify" }}
		    policy round_robin
		    {{ getenv "HEALTHCHECK" "" }}
	    }

	    tls {{ getenv "TLS" "self_signed" }}
	    templates
	}
EOF
cat > "$TEMP/caddyfile.toml" <<-EOF
[template]
src = "caddyfile.tmpl"
dest = "/caddy/Caddyfile"
owner = "root"
mode = "0644"
keys = ["/"]
EOF

cat > "${TEMP}/Dockerfile" <<-EOF
	FROM alpine:${ALPINE_VERSION}

	ADD caddy /usr/bin/caddy
	ADD index.html /var/www/public/index.html
	ADD Caddyfile /caddy/Caddyfile

	RUN apk update
	RUN apk add ca-certificates
	RUN apk add libcap

	RUN setcap CAP_NET_BIND_SERVICE=+eip /usr/bin/caddy

	RUN addgroup -S -g 1000 caddy
	RUN adduser -S -u 1000 -G caddy -g caddy -h /caddy caddy
	RUN chown -R caddy:caddy /var/www/public
	RUN chown -R caddy:caddy /caddy

	ENV CADDYPATH=/caddy/ssl
	WORKDIR /tmp
	# Install extra package
	RUN apk --update add fping curl bash &&\
	    rm -rf /var/cache/apk/*

	COPY caddyfile.tmpl /opt/confd/etc/templates/
	COPY caddyfile.toml /opt/confd/etc/conf.d/

	# Install confd
	ENV CONFD_VERSION="0.16.0" \
	    CONFD_HOME="/opt/confd"
	RUN mkdir -p "/opt/confd/etc/conf.d" "/opt/confd/etc/templates" "/opt/confd/log" "/opt/confd/bin" &&\
	    curl -Lo "/opt/confd/bin/confd" "https://github.com/kelseyhightower/confd/releases/download/v0.16.0/confd-0.16.0-linux-amd64" &&\
	    chmod +x "/opt/confd/bin/confd"

	USER caddy

	CMD sh -c "/opt/confd/bin/confd -onetime -backend env -confdir /opt/confd/etc && /usr/bin/caddy -agree -conf /caddy/Caddyfile -log /dev/stdout"
EOF

docker build --no-cache --tag caddy:"$(cat "${TEMP}/version")" --tag caddy:latest "${TEMP}"


docker tag caddy:latest mschneider82/caddy-tls-reverseproxy:"$(cat "${TEMP}/version")"
docker tag caddy:latest mschneider82/caddy-tls-reverseproxy:latest
docker push mschneider82/caddy-tls-reverseproxy:"$(cat "${TEMP}/version")"
docker push mschneider82/caddy-tls-reverseproxy:latest
